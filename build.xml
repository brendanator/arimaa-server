<project name="Arimaa server" default="run" basedir=".">
  <description>
    Build file for all Arimaa server programming tasks.
  </description>

  <property name="src-scala" location="src/scala"/>
  <property name="src-test" location="src/test"/>
  <property name="src-web" value="src/webapp" />
  <property name="lib" location="lib/main"/>
  <property name="lib-test" location="lib/test"/>

  <property name="build" location="target"/>
  <property name="build-classes" location="target/classes"/>
  <property name="build-lib" location="target/lib/"/>
  <property name="build-war" value="target/arimaa-server.war"/>

  <property name="builder" value="ArimaaServerTeam" />
  <tstamp prefix="build-info">
    <format property="current-date" pattern="d-MMMM-yyyy" locale="en" />
    <format property="current-time" pattern="hh:mm:ss a z" locale="en" />
  </tstamp>

  <!-- The classpath used for compiling source files. -->
  <path id="cp">
    <fileset dir="${lib}">
      <include name="scala/*.jar"/>
      <include name="scalatra/*.jar"/>
    </fileset>
    <pathelement path="${build-classes}"/>
  </path>

  <!-- The classpath used for compiling test files. -->
  <path id="cp-tests">
    <path refid="cp"/>
    <fileset dir="${lib-test}">
      <include name="junit/*.jar"/>
      <include name="scalatest/*.jar"/>
    </fileset>
  </path>

  <target name="clean" description="Delete the build directory.">
    <delete dir="${build}"/>
  </target>

  <target name="init" description="Perform initialization tasks.">
    <mkdir dir="${build-classes}"/>
    <mkdir dir="${build-lib}"/>

    <!-- defines the scala and scalac ant tasks -->
    <taskdef resource="scala/tools/ant/antlib.xml">
      <classpath refid="cp"/>
    </taskdef>

    <!-- defines the scalatest ant task -->
    <taskdef name="scalatest" classname="org.scalatest.tools.ScalaTestAntTask">
      <classpath refid="cp-tests"/>
    </taskdef>
  </target>

  <target name="compile" depends="init" description="Compile the source files.">
    <scalac srcdir="${src-scala}" destdir="${build-classes}"
            classpathref="cp" force="changed">
      <include name="**/*.scala"/>
    </scalac>
  </target>

  <target name="compile-tests" depends="compile" description="Compile the test files.">
    <scalac srcdir="${src-test}" destdir="${build-classes}"
            classpathref="cp-tests" force="changed">
      <include name="**/*.scala"/>
    </scalac>
  </target>

  <target name="package-noclean" depends="compile" description="Package server into WAR file">
    <!-- Delete and recreate to clean out old libraries, since <copy> doesn't do that -->
    <delete dir="${build-lib}"/>
    <mkdir dir="${build-lib}"/>
    <!-- We copy libs over in order to flatten them for inclusion in war file. -->
    <copy todir="${build-lib}" flatten="true" includeEmptyDirs="false">
      <fileset dir="${lib}"/>
    </copy>
    <war warfile="${build-war}" needxmlfile="false">
      <classes dir="${build-classes}" />
      <lib dir="${build-lib}">
	<include name="**/*.jar"/>
      </lib>
      <fileset dir="${src-web}"/>
      <!-- <zipfileset dir="props" prefix="WEB-INF/classes/props"/> -->
      <manifest>
	<attribute name="Built-By" value="${builder}" />
	<attribute name="Built-On" value="${build-info.current-date}" />
	<attribute name="Built-At" value="${build-info.current-time}" />
      </manifest>
    </war>
  </target>

  <target name="package" depends="clean,package-noclean"
          description="Package server into WAR file with a fresh compile"/>

  <target name="run" depends="compile" description="Run the server.">
    <java classname="Hello">
      <classpath refid="cp"/>
    </java>
  </target>

  <target name="run-tests" depends="compile-tests" description="Run the unit tests.">
    <junit haltonerror="true" haltonfailure="true">
      <classpath refid="cp-tests" />
      <batchtest>
        <fileset dir="${build-classes}">
          <include name="**/*JTests.class" />
        </fileset>
      </batchtest>
      <formatter type="brief" usefile="false"/>
    </junit>

    <scalatest>
      <suite classname="BoardTests"/>
    </scalatest>
  </target>
</project>
